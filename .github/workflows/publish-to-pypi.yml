name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v1.2.3 등의 태그가 푸시될 때 실행
  release:
    types: [published]  # GitHub에서 릴리즈가 생성될 때 실행

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev,test,lint]"

    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest tests/ -v --tb=short

    - name: Run linting
      run: |
        source .venv/bin/activate
        ruff check --output-format=github .
        ruff format --check .

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install build dependencies
      run: |
        uv venv
        uv pip install build twine

    - name: Update version from release tag
      if: github.event_name == 'release'
      run: |
        # GitHub Release 태그에서 버전 추출 (v1.0.0 -> 1.0.0)
        RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Release version: $RELEASE_VERSION"

        # pyproject.toml의 버전 업데이트
        sed -i "s/^version = .*/version = \"$RELEASE_VERSION\"/" pyproject.toml

        # 변경사항 확인
        grep "^version" pyproject.toml

    - name: Build package
      run: |
        source .venv/bin/activate
        python -m build

    - name: Check built package
      run: |
        source .venv/bin/activate
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-to-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/transactional-sqlalchemy

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true

  publish-to-pypi:
    needs: [build, publish-to-testpypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/transactional-sqlalchemy

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
