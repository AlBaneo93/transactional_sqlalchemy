name: Build and Publish with uv

on:
  workflow_run:
    workflows: ["CI Tests"]
    types:
      - completed

jobs:
  # 1. 빌드 작업
  build:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    permissions:
      id-token: write
      contents: write

    steps:
      # 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      # uv 설치
      - name: Install uv
        uses: astral-sh/setup-uv@v6

      # 릴리즈 태그에서 버전 추출 및 업데이트
      - name: Update version from release tag
        if: startsWith(github.event.workflow_run.head_branch, 'refs/tags/v')
        run: |
          # 'v' 접두사를 제거하고 버전 번호만 추출합니다.
          RELEASE_VERSION=$(echo "${{ github.event.workflow_run.head_branch }}" | sed 's/refs\/tags\/v//')

          echo "Release tag: ${{ github.event.workflow_run.head_branch }}"
          echo "Extracted version: $RELEASE_VERSION"

          # sed 명령어로 pyproject.toml 파일의 version 필드 업데이트
          sed -i "s/^version = .*/version = \"$RELEASE_VERSION\"/" pyproject.toml

          echo "Updated version:"
          grep "^version" pyproject.toml

      # 패키지 빌드
      - name: Build package with uv
        run: |
          uv sync
          uv build

      # 빌드 결과물 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # 2. TestPyPI 배포 (stage 브랜치용)
  publish-to-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.event == 'push' &&
      github.event.workflow_run.head_branch == 'stage'
    # 디버깅을 위한 조건 로깅
    steps:
      - name: Debug workflow context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
    environment:
      name: testpypi
      url: https://test.pypi.org/p/transactional-sqlalchemy
#    steps:
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: dist
#          path: dist/
#      - name: Publish to TestPyPI 🚀
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          repository-url: https://test.pypi.org/legacy/
#          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#          skip-existing: true

  # 3. PyPI 배포 (릴리즈 태그용)
  publish-to-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.event.workflow_run.head_branch, 'refs/tags/v')
    # 디버깅을 위한 조건 로깅
    steps:
      - name: Debug workflow context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Is tag: ${{ startsWith(github.event.workflow_run.head_branch, 'refs/tags/v') }}"
    environment:
      name: pypi
      url: https://pypi.org/p/transactional-sqlalchemy
#    steps:
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: dist
#          path: dist/
#      - name: Publish to PyPI 🚀
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          password: ${{ secrets.PYPI_API_TOKEN }}
